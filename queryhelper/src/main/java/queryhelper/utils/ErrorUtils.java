package queryhelper.utils;


import com.google.gson.Gson;
import dev.ai4j.openai4j.OpenAiHttpException;
import queryhelper.pojo.GenericResponse;
import queryhelper.pojo.OpenAIHttpExceptionErrorResponse;

public class ErrorUtils {
    private static final GenericResponse errorResponse = new GenericResponse();

    public static GenericResponse fileError(Exception e) {
        return genericErrorResponse(e, "There was an error while reading from file.");
    }

    public static GenericResponse csvFileError(Exception e) {
        return genericErrorResponse(e, "There was an error while creating the csv file!");
    }

    public static GenericResponse openAIError(Exception e) {
        if (e.getCause() instanceof OpenAiHttpException) { // When API key is wrong (currently the only supported exception by langchain)
            Gson gson = new Gson();
            String errorMessage = e.getMessage();
            int startIndex = errorMessage.indexOf('{');
            int endIndex = errorMessage.lastIndexOf('}');

            if (startIndex != -1 && endIndex != -1) {
                String jsonError = errorMessage.substring(startIndex, endIndex + 1);
                OpenAIHttpExceptionErrorResponse data = gson.fromJson(jsonError, OpenAIHttpExceptionErrorResponse.class);

                errorResponse.setData(data);
                errorResponse.setMessage("Error occurred while communicating with OpenAI's API.");
                errorResponse.setStatusCode(500);
                return errorResponse;
            }
        }

        return genericErrorResponse(e, "Error occurred while communicating with OpenAI's API.");
    }

    public static GenericResponse invalidResponseError(Exception e) {
        return genericErrorResponse(e, "The generated response by chatGPT is invalid.");
    }

    public static GenericResponse invalidSQLError(Exception e) {
        return genericErrorResponse(e, "The SQL query generated by chatGPT failed during execution.");
    }

    public static GenericResponse genericErrorResponse(Exception e, String message) {
        errorResponse.setData(e.getMessage());
        errorResponse.setMessage(message);
        errorResponse.setStatusCode(500);
        return errorResponse;
    }

}
